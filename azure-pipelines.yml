trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - docs/

variables:
  build: $(Build.BuildId)
  jobuuid: $(Build.BuildId)$(Agent.Id)
  GOROOT: '/usr/local/go1.12'
  GOPATH: '/tmp/go'
  GOBIN:  '$(GOPATH)/bin'
  ref: $(Build.SourceBranch)
  branch: $(Build.SourceBranchName)
  controller_image: 'gcr.io/focal-freedom-236620/controller:skupper'
  enterprise_image: 'gcr.io/focal-freedom-236620/enterprise-controller:latest'
  agent_image: 'gcr.io/focal-freedom-236620/agent:skupper'
  operator_image: 'gcr.io/focal-freedom-236620/operator:skupper'
  iofog_agent_version: '2.0.0-rc1-b6954'
  controller_version: '2.0.0-skupper'
  version:
  agent_vm_list:
  controller_vm:
  windows_ssh_key_path: 'C:/Users/$(azure.windows.user)/.ssh'
  ssh_key_file: 'id_rsa'
  windows_kube_config_path: 'C:/Users/$(azure.windows.user)/.kube/config'

stages:

- stage: Build
  jobs:

  - template: templates/build-job.yaml
    parameters:
      os: linux

  - template: templates/build-job.yaml
    parameters:
      os: darwin

  - template: templates/build-job.yaml
    parameters:
      os: windows
    
- stage: Test
  jobs:

  - job: Windows_K8s
    pool: 'Azure Windows'
    steps:
    - bash: |
        rm -rf /mnt/c/Users/$(azure.windows.user)/.iofog/
      displayName: 'Clean up Windows env'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - bash: |
        dir=$(wslpath "C:\Users\$(azure.windows.user)\AppData\Local\Microsoft\WindowsApps")
        echo moving
        mv windows/iofogctl $dir/

        echo chmodding
        chmod +x $dir/iofogctl

        echo version
        $dir/iofogctl version
        iofogctl version
      displayName: 'Prepare iofogctl binary'
    - bash: |
        tempBashPath=$(wslpath "$(Agent.TempDirectory)")
        cd $tempBashPath
        git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
        bats --version
      displayName: 'Install Bats'
    - bash: |
        for suffix in bash sh bats; do
          for file in $(find ./test -name "*.$suffix"); do
            dos2unix -o $file
          done
        done
      displayName: 'Format test files'
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
      parameters:
        id: wink8s$(build)
        distro: $(gcp.vm.distro.stretch)
        repo: $(gcp.vm.repo.debian)
        agent_count: 2
        controller_count: 0
        windows: 'true'
    - template: templates/configure-remote-tests.yaml
      parameters:
        windows: 'true'
    - task: DownloadSecureFile@1
      displayName: 'Download SSH keys to'
      name: 'gcp_iofogctl_rsa'
      inputs:
        secureFile: 'gcp_iofogctl_rsa'
    - bash: |
        destFolder=$(wslpath "$(windows_ssh_key_path)")
        echo "SSH downloaded at $(gcp_iofogctl_rsa.secureFilePath)"
        echo "Converting windows path to bash path"
        bashPath=$(wslpath "$(gcp_iofogctl_rsa.secureFilePath)")
        echo "Bash path = $bashPath"
        ls $bashPath
        mkdir -p $destFolder
        cp $bashPath $destFolder/$(ssh_key_file)
        echo "Copied SSH fey from $bashPath to $destFolder"
        chmod 0700 $destFolder
        chmod 0600 $destFolder/$(ssh_key_file)
        ls -la $destFolder
      displayName: Prepare SSH key
    - bash: |
        sudo apt-get install -y jq
      displayName: 'Install jq'
    - bash: |
        sed -i "s|KEY_FILE=.*|KEY_FILE=\"$(windows_ssh_key_path)/$(ssh_key_file)\"|g" test/conf/env.sh
        sed -i "s|KUBE_CONFIG=.*|KUBE_CONFIG=\"$(windows_kube_config_path)\"|g" test/conf/env.sh
        cat test/conf/env.sh
      displayName: 'Prepare Test Config'
    - bash: |
        kubePath=$(wslpath "C:\Users\$(azure.windows.user)\.kube\config")
        export KUBECONFIG="$kubePath"
        gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
        gcloudPath="C:\\\Program Files (x86)\\\Google\\\Cloud SDK\\\google-cloud-sdk\\\bin\\\gcloud"
        sed -i "s|cmd-path:.*|cmd-path: $gcloudPath|g" $kubePath
      displayName: 'Connect to cluster'
    - bash: |
        set -o pipefail
        export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
        echo $WSL_KEY_FILE
        test/run.bash functional-k8s | tee test/conf/results-functional-k8s.tap
      displayName: 'Run Functional Tests'
    - bash: |
        tap-junit -i test/conf/results-functional-k8s.tap -o test/conf -s K8s -n results-functional-k8s.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - bash: |
          test/clean.bash $(jobuuid)
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
      parameters:
        id: wink8s$(build)
        agent_count: 2
        controller_count: 0

  - job: Windows_Vanilla
    pool: 'Azure Windows'
    steps:
    - bash: |
        rm -rf /mnt/c/Users/$(azure.windows.user)/.iofog/
      displayName: 'Clean up Windows env'
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
      parameters:
        id: win$(build)
        distro: $(gcp.vm.distro.stretch)
        repo: $(gcp.vm.repo.debian)
        agent_count: 2
        controller_count: 1
        windows: "true"
    - template: templates/configure-remote-tests.yaml
      parameters:
        windows: 'true'
    - task: DownloadSecureFile@1
      displayName: 'Download SSH keys to'
      name: 'gcp_iofogctl_rsa'
      inputs:
        secureFile: 'gcp_iofogctl_rsa'
    - bash: |
        destFolder=$(wslpath "$(windows_ssh_key_path)")
        echo "SSH downloaded at $(gcp_iofogctl_rsa.secureFilePath)"
        echo "Converting windows path to bash path"
        bashPath=$(wslpath "$(gcp_iofogctl_rsa.secureFilePath)")
        echo "Bash path = $bashPath"
        ls $bashPath
        mkdir -p $destFolder
        cp $bashPath $destFolder/$(ssh_key_file)
        echo "Copied SSH key from $bashPath to $destFolder"
        chmod 0700 $destFolder
        chmod 0600 $destFolder/$(ssh_key_file)
        rm -f $destFolder/known_hosts
        ls -la $destFolder
      displayName: Prepare SSH key
    - bash: |
        sed -i "s|KEY_FILE=.*|KEY_FILE=\"$(windows_ssh_key_path)/$(ssh_key_file)\"|g" test/conf/env.sh
        cat test/conf/env.sh
      displayName: 'Prepare Test Config'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - bash: |
        dir=$(wslpath "C:\Users\$(azure.windows.user)\AppData\Local\Microsoft\WindowsApps")
        echo moving
        mv windows/iofogctl $dir/

        echo chmodding
        chmod +x $dir/iofogctl

        echo version
        $dir/iofogctl version
        iofogctl version
      displayName: 'Prepare iofogctl binary'
    - bash: |
        tempBashPath=$(wslpath "$(Agent.TempDirectory)")
        cd $tempBashPath
        git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
        bats --version
      displayName: 'Install Bats'
    - bash: |
        sudo apt-get install -y jq
      displayName: 'Install jq'
    - bash: |
        for file in $(find ./test -name '*.bash'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.sh'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.bats'); do dos2unix -o $file; done
      displayName: 'Format test files'
    - bash: |
        test/run.bash smoke
      displayName: 'Run Smoke Tests'
    - bash: |
        export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
        echo $WSL_KEY_FILE
        test/run.bash functional-vanilla
      displayName: 'Run Functional Tests'
    - template: templates/functional-clean-vm.yaml
      parameters:
        id: win$(build)
        agent_count: 2
        controller_count: 1

  - job: Windows_Local
    pool: 'Azure Windows'
    steps:
    - bash: |
        rm -rf /mnt/c/Users/$(azure.windows.user)/.iofog/
      displayName: 'Clean up Windows env'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - bash: |
        dir=/mnt/c/Users/$(azure.windows.user)/AppData/Local/Microsoft/WindowsApps/
        echo moving
        mv windows/iofogctl $dir

        echo chmodding
        chmod +x $dir/iofogctl

        echo version
        $dir/iofogctl version
        iofogctl version
      displayName: 'Prepare iofogctl binary'
    - bash: |
        if [[ -z $(which docker) ]]; then
          apt-get update -y
          apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable"
          apt-get update -y
          apt-get install -y docker-ce
          usermod -aG docker $USER
        fi
      displayName: Install docker if necessary
    - template: templates/init-gcloud-steps.yaml
      parameters:
        windows: "true"
    - bash: |
        if [[ -z $(echo $DOCKER_HOST) ]]; then
          export DOCKER_HOST="tcp://localhost:2375"
        fi
        gcloud --quiet auth configure-docker
        echo "$DOCKER_HOST"
        docker info
        docker "pull" "$(controller_image)"
        docker "pull" "$(agent_image)"
      displayName: 'Pull develop gcr docker image'
      failOnStderr: false
    - template: templates/configure-remote-tests.yaml
    - bash: |
        tempBashPath=$(wslpath "$(Agent.TempDirectory)")
        cd $tempBashPath
        git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
        bats --version
      displayName: 'Install Bats'
    - bash: |
        for file in $(find ./test -name '*.bash'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.sh'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.bats'); do dos2unix -o $file; done
      displayName: 'Format test files'
    - bash: |
        if [[ -z $(echo $DOCKER_HOST) ]]; then
          export DOCKER_HOST="tcp://localhost:2375"
        fi
        set -o pipefail
        echo "$DOCKER_HOST"
        docker images
        export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
        echo $WSL_KEY_FILE
        test/run.bash functional-local | tee test/conf/results-functional-local.tap
      displayName: 'Run Functional Tests'
    - script: |
        RD /S /Q "C:\Users\$(azure.windows.user)\.iofog\"
      condition: always()
      displayName: 'Clean local .iofog environment'
    - bash: |
        if [[ -z $(echo $DOCKER_HOST) ]]; then
          export DOCKER_HOST="tcp://localhost:2375"
        fi
        docker rm -f $(docker ps -aq)
        docker "system" "prune" "-af"
      condition: always()
      displayName: 'Clean local docker environment'